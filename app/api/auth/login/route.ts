import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import bcrypt from "bcrypt";
import { sendEmail } from "@/lib/mail/sender";
import { createSession } from "@/lib/auth/session";

const prisma = new PrismaClient();

function generateOTP(length = 6) {
  return Math.floor(100000 + Math.random() * 900000).toString().slice(0, length);
}

export async function POST(req: Request) {
  try {
    const { email, password, rememberDevice, deviceToken, selectedRole } = await req.json();

    if (!email || !password) {
      return NextResponse.json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin" }, { status: 400 });
    }

    const user = await prisma.users.findUnique({ where: { email } });
    if (!user) {
      return NextResponse.json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c" }, { status: 401 });
    }

    const isMatch = await bcrypt.compare(password, user.password_hash);
    if (!isMatch) {
      return NextResponse.json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c" }, { status: 401 });
    }

    // üîê Ki·ªÉm tra role c·ªßa user trong database
    if (selectedRole) {
      // L·∫•y role c·ªßa user t·ª´ DB
      const userRole = await prisma.user_Roles.findFirst({
        where: { user_id: user.user_id },
        include: { role: true },
      });

      if (!userRole) {
        return NextResponse.json({ message: "T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c g√°n quy·ªÅn" }, { status: 403 });
      }

      const dbRoleName = userRole.role.role_name.toLowerCase();
      const requestedRole = selectedRole.toLowerCase();

      // Map role names
      const roleMapping: Record<string, string[]> = {
        'student': ['student'],
        'teacher': ['lecturer', 'teacher'],
      };

      // Ki·ªÉm tra role c√≥ kh·ªõp kh√¥ng
      const allowedRoles = roleMapping[requestedRole] || [];
      if (!allowedRoles.includes(dbRoleName)) {
        // Role kh√¥ng kh·ªõp - b√°o l·ªói r√µ r√†ng
        if (requestedRole === 'student' && (dbRoleName === 'lecturer' || dbRoleName === 'teacher')) {
          return NextResponse.json({ 
            message: "T√†i kho·∫£n n√†y kh√¥ng thu·ªôc lo·∫°i sinh vi√™n. Vui l√≤ng ƒëƒÉng nh·∫≠p b·∫±ng trang d√†nh cho gi·∫£ng vi√™n.",
            wrongRole: true,
            correctRole: 'teacher'
          }, { status: 403 });
        } else if ((requestedRole === 'teacher' || requestedRole === 'lecturer') && dbRoleName === 'student') {
          return NextResponse.json({ 
            message: "T√†i kho·∫£n n√†y kh√¥ng thu·ªôc lo·∫°i gi·∫£ng vi√™n. Vui l√≤ng ƒëƒÉng nh·∫≠p b·∫±ng trang d√†nh cho sinh vi√™n.",
            wrongRole: true,
            correctRole: 'student'
          }, { status: 403 });
        } else {
          return NextResponse.json({ 
            message: `T√†i kho·∫£n kh√¥ng c√≥ quy·ªÅn ƒëƒÉng nh·∫≠p v·ªõi vai tr√≤ ${requestedRole}`,
            wrongRole: true
          }, { status: 403 });
        }
      }
    }

    // Check if account is active
    if (user.status === 'pending') {
      return NextResponse.json({ 
        message: "T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c. Vui l√≤ng ki·ªÉm tra email ho·∫∑c y√™u c·∫ßu g·ª≠i l·∫°i m√£ OTP",
        action: "resend_otp" // Frontend c√≥ th·ªÉ d√πng ƒë·ªÉ hi·ªÉn th·ªã n√∫t "G·ª≠i l·∫°i OTP"
      }, { status: 403 });
    }

    if (user.status === 'inactive') {
      return NextResponse.json({ message: "T√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a" }, { status: 403 });
    }

    // üîê Ki·ªÉm tra thi·∫øt b·ªã ƒë√£ tin c·∫≠y ch∆∞a (n·∫øu c√≥ deviceToken)
    if (deviceToken) {
      const trustedDevice = await prisma.trusted_Devices.findFirst({
        where: {
          user_id: user.user_id,
          device_token: deviceToken,
          expires_at: {
            gte: new Date(), // Ch∆∞a h·∫øt h·∫°n
          },
        },
      });

      if (trustedDevice) {
        // C·∫≠p nh·∫≠t th·ªùi gian s·ª≠ d·ª•ng cu·ªëi
        await prisma.trusted_Devices.update({
          where: { device_id: trustedDevice.device_id },
          data: { last_used: new Date() },
        });

        // L·∫•y role c·ªßa user ƒë·ªÉ t·∫°o session
        const userRole = await prisma.user_Roles.findFirst({
          where: { user_id: user.user_id },
          include: { role: true },
        });

        // T·∫°o session cho user
        await createSession({
          user_id: user.user_id.toString(),
          email: user.email,
          role: userRole?.role.role_name || 'Student',
          full_name: user.full_name,
        });

        // ‚úÖ Thi·∫øt b·ªã tin c·∫≠y - B·ªè qua OTP, ƒëƒÉng nh·∫≠p th√†nh c√¥ng lu√¥n
        return NextResponse.json({
          message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
          skipOTP: true,
          user: {
            user_id: user.user_id,
            email: user.email,
            full_name: user.full_name,
            role: userRole?.role.role_name || 'Student',
          },
        });
      }
    }

    // ‚ùå Thi·∫øt b·ªã ch∆∞a tin c·∫≠y - G·ª≠i OTP
    const otp = generateOTP();
    const expires_at = new Date(Date.now() + 5 * 60 * 1000); // 5 ph√∫t

    await prisma.user_OTPs.create({
      data: {
        user_id: user.user_id,
        code: otp,
        purpose: "login",
        expires_at,
      },
    });

    // G·ª≠i OTP v·ªÅ email
    await sendEmail({
      to: email,
      subject: "M√£ OTP ƒëƒÉng nh·∫≠p SmartLearning",
      html: `
        <div style="font-family:sans-serif;line-height:1.5">
          <h2>Xin ch√†o ${user.full_name},</h2>
          <p>M√£ OTP ƒëƒÉng nh·∫≠p c·ªßa b·∫°n l√†:</p>
          <h3 style="font-size:22px;letter-spacing:3px">${otp}</h3>
          <p>M√£ n√†y s·∫Ω h·∫øt h·∫°n sau <b>5 ph√∫t</b>.</p>
        </div>
      `,
    });

    return NextResponse.json({
      message: "ƒê√£ g·ª≠i OTP v·ªÅ email. Vui l√≤ng nh·∫≠p OTP ƒë·ªÉ x√°c th·ª±c ƒëƒÉng nh·∫≠p.",
      skipOTP: false,
      deviceToken: deviceToken, // S·ª≠ d·ª•ng deviceToken t·ª´ client (localStorage)
      rememberDevice: rememberDevice || false,
    });
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  } catch (error: any) {
    console.error("‚ùå Login Error:", error);
    return NextResponse.json({ message: "Server error", error: error.message }, { status: 500 });
  }
}