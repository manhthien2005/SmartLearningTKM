import bcrypt from "bcrypt";
import { PrismaClient } from "@prisma/client";
import { sendEmail } from "@/lib/mail/sender";

const prisma = new PrismaClient();

export function generateOTP(length = 6) {
  return Math.floor(100000 + Math.random() * 900000).toString().slice(0, length);
}

export async function registerBaseUser(email: string, password: string, full_name: string) {
  // Ki·ªÉm tra tr√πng email
  const existing = await prisma.users.findUnique({ where: { email } });
  
  // N·∫øu email ƒë√£ t·ªìn t·∫°i v√† ch∆∞a x√°c th·ª±c, x√≥a t√†i kho·∫£n c≈© ƒë·ªÉ cho ph√©p ƒëƒÉng k√Ω l·∫°i
  if (existing) {
    if (existing.status === 'pending' && !existing.email_verified) {
      // X√≥a t√†i kho·∫£n ch∆∞a x√°c th·ª±c (cascade s·∫Ω x√≥a c√°c b·∫£ng li√™n quan)
      await prisma.users.delete({ where: { user_id: existing.user_id } });
      console.log(`üóëÔ∏è ƒê√£ x√≥a t√†i kho·∫£n ch∆∞a x√°c th·ª±c: ${email}`);
    } else {
      // T√†i kho·∫£n ƒë√£ x√°c th·ª±c ho·∫∑c ƒëang active
      throw new Error("Email ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng");
    }
  }

  const password_hash = await bcrypt.hash(password, 10);

  // T·∫°o ng∆∞·ªùi d√πng c∆° b·∫£n
  const user = await prisma.users.create({
    data: {
      email,
      password_hash,
      full_name,
      status: "pending",
    },
  });

  // G·ª≠i OTP x√°c th·ª±c
  const otp = generateOTP();
  const expires_at = new Date(Date.now() + 5 * 60 * 1000);

  await prisma.user_OTPs.create({
    data: {
      user_id: user.user_id,
      code: otp,
      purpose: "verify_email",
      expires_at,
    },
  });

  await sendEmail({
    to: email,
    subject: "X√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n",
    html: `
      <div style="font-family:sans-serif;line-height:1.5">
        <h2>Xin ch√†o ${full_name},</h2>
        <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n.</p>
        <p>M√£ OTP c·ªßa b·∫°n l√†:</p>
        <h3 style="font-size:22px;letter-spacing:3px">${otp}</h3>
        <p>M√£ n√†y s·∫Ω h·∫øt h·∫°n sau <b>5 ph√∫t</b>.</p>
      </div>
    `,
  });

  return user;
}

export async function assignRole(user_id: number, role_name: string) {
  const role = await prisma.roles.findUnique({ where: { role_name } });
  if (!role) throw new Error(`Role "${role_name}" not found`);

  await prisma.user_Roles.create({
    data: {
      user_id,
      role_id: role.role_id,
    },
  });
}
